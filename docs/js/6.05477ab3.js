(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[6],{2514:function(e,t,n){"use strict";var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("section",{staticClass:"page-header"},[n("div",{staticClass:"donate"},[n("a",{attrs:{href:e.donateUrl,target:"_blank",title:"Donate"}},[n("i",{staticClass:"fas fa-heart",staticStyle:{color:"red"}})])]),n("div",{staticClass:"text-h1 project-name"},[e._v(e._s(e.title))]),n("div",{staticClass:"text-h2 project-tagline"},[e._v(e._s(e.tagline))]),n("q-btn",{staticClass:"btn",attrs:{type:"a",href:e.locationUrl,target:"_blank",label:"View on GitHub","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/docs",label:"Docs","no-caps":"",flat:""}}),n("q-btn",{staticClass:"btn",attrs:{to:"/examples",label:"Examples","no-caps":"",flat:""}}),e.hasInteractiveDemo?n("q-btn",{staticClass:"btn",attrs:{to:"/demo",label:"Interactive Demo","no-caps":"",flat:""}}):e._e(),n("q-btn",{staticClass:"btn",attrs:{type:"a",href:e.donateUrl,target:"_blank",label:"Donate","no-caps":"",flat:""}}),n("div",{staticClass:"row justify-evenly items-center q-ma-sm"},[n("div",{staticClass:"quasar"},[e._v(e._s(e.quasarDesc))]),n("div",{staticClass:"byline"},[e._v(e._s(e.byline)),n("a",{attrs:{href:e.bylineTwitter,target:"_blank",title:"Twitter"}},[n("i",{staticClass:"fab fa-twitter"})])])])],1),n("main",{staticClass:"flex flex-start justify-center inset-shadow"},[n("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg inset-shadow",staticStyle:{width:"100%",height:"3px"}}),n("div",{staticClass:"q-pa-md col-12-sm col-8-md col-6-lg shadow-1",staticStyle:{"max-width":"800px",width:"100%"}},[e._t("default")],2)])])},o=[],s={name:"Hero",data:function(){return{title:"QPdfviewer",tagline:"PDF Viewer for SPA, SSR, Electron and Mobile",byline:"Created and maintained by Jeff Galbraith",bylineTwitter:"https://twitter.com/jgalbraith64",quasarDesc:"A Quasar Framework Component and App Extension",locationUrl:"https://github.com/quasarframework/app-extension-qpdfviewer",donateUrl:"https://github.com/sponsors/hawkeye64",hasInteractiveDemo:!1}}},r=s,i=n("2877"),l=n("9c40"),d=n("eebe"),c=n.n(d),p=Object(i["a"])(r,a,o,!1,null,null,null);t["a"]=p.exports;c()(p,"components",{QBtn:l["a"]})},"8b24":function(e,t,n){"use strict";n.r(t);var a=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("hero",[n("q-markdown",{attrs:{src:e.markdown,toc:""},on:{data:e.onToc}}),n("json-api-viewer",{attrs:{title:"QPdfviewer API",json:e.json}}),n("q-markdown",[e._v("\n# Donate\nIf you appreciate the work that went into this App Extension, please consider [donating to Quasar](https://donate.quasar.dev).\n\n---\nThis page created with [QMarkdown](https://quasarframework.github.io/app-extension-qmarkdown), another great Quasar App Extension.\n    ")]),n("q-page-scroller",{attrs:{position:"bottom-right","scroll-offset":150,offset:[18,18]}},[n("q-btn",{attrs:{fab:"",icon:"keyboard_arrow_up",color:"primary"}})],1)],1)},o=[],s=n("2514"),r="QPdfviewer\n===\n\nQPdfviewer is a [Quasar App Extension](https://quasar.dev/app-extensions/introduction). It allows you to display PDF documents in your Quasar App.\n\n![QPdfviewer](qpdfviewer.png \"QWindow\" =800x800)\n\nThis work is currently in `beta` and there are expected changes while things get worked out. Your help with testing is greatly appreciated. Suggestions and PRs welcomed.\n\n# Install\nTo add this App Extension to your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext add @quasar/qpdfviewer\n```\n\n# Uninstall\nTo remove this App Extension from your Quasar application, run the following (in your Quasar app folder):\n```\nquasar ext remove @quasar/qpdfviewer\n```\n\n# Describe\n(TBD) You can use `quasar describe QPdfviewer`\n\n# Docs\nCan be found [here](https://quasarframework.github.io/app-extension-qpdfviewer).\n\n# Examples\nCan be found [here](https://quasarframework.github.io/app-extension-qpdfviewer/examples).\n\n# Demo (source) Project\nCan be found [here](https://github.com/quasarframework/app-extension-qpdfviewer/tree/master/demo).\n\n# About QPdfviewer\nQPdfviewer has the ability to use two differnt PDF viewing engines: 1) HTML5 and 2) PDFJS (Mozilla). Each one is a bit different and you must choose which one is best suited for your needs. HTML5 is the browser-native one. If you are using Electron, this will not be available, so you must use the PDFJS engine. To specify which engine to use, add the `type` property with values `html5` or `pdfjs`. Another note about PDFJS, is that it brings a lot of resources to the client, while the HTML5 engine is already built into most modern browsers.\n\n:::tip\nIf you are working with Electron, the `type` will automatically be `pdfjs` and changing `type=\"html5\"` will have no effect\n:::\n\n# Working with QPdfviewer\nWorking with QPdfviewer can be very minimal:\n```html\n  <q-pdfviewer\n    v-model=\"visible\"\n    src=\"pdf/c4611_sample_explain.pdf\"\n    type=\"html5\"\n  />\n```\nor\n```html\n  <q-pdfviewer\n    v-model=\"visible\"\n    src=\"pdf/c4611_sample_explain.pdf\"\n    type=\"pdfjs\"\n  />\n```\n\n# PDFjs\nThe PDFjs engine is a bit buggy. It's been found that it works best if you can provide a full URL instead of a relative URL. Or, the first character of your URL path **must** start with a `/`. So instead of `my-pdf-file.pdf` use `/my-pdf-file.pdf`.\n\n# Blobs\nIf you want to load a PDF as a blob, you can do it like this:\n\n```js\nfetchPDF (payload) {\n  this.$axios.post('/inpatientPDFs/snr/download', payload, { responseType: 'blob' }).then(res => {\n    // console.log('am i downloading?', res)\n    const blob = new Blob([res.data], { type: res.data.type })\n    const url = window.URL.createObjectURL(blob)\n    pdfSrc = url // where pdfSrc is used in the :src parameter of the qpdfviewer\n  }).catch(err => {\n    console.log('or do i have an error?', err) // TODO beef up this\n    this.$q.notify({ message: 'Error downloading PDF', type: 'negative', textColor: 'white', color: 'negative', icon: 'error', closeBtn: 'close', position: 'top' })\n  })\n}\n```\n\n# Blob issues with Android\nThere are some [known issues](https://stackoverflow.com/questions/40750143/android-url-createobjecturl-does-not-work-properly-failed-to-load-because-no-s) with creating blobs on an Android. This is the work-around:\n\n```js\nlet url = (window.URL || window.webkitURL || window || {}).createObjectURL(blob)\n// workaround for mobile playback, where it didn't work on chrome/android.\n// fetch blob at url using xhr, and use url generated from that blob.\n// see issue: https://code.google.com/p/chromium/issues/detail?id=227476\n// thanks, gbrlg\nvar xhr = new XMLHttpRequest()\nxhr.open('GET', url, true)\nxhr.responseType = 'blob'\nxhr.onreadystatechange = function() {\n  if (xhr.readyState === 4 && xhr.status == 200) {\n    var url = (window.URL || window.webkitURL || window || {}).createObjectURL(xhr.response)\n\n    // now url is ready\n  }\n}\nxhr.send()\n```",i=n("c533"),l={name:"PageIndex",components:{Hero:s["a"]},data:function(){return{markdown:r,json:i}},computed:{toc:{get:function(){return this.$store.state.common.toc},set:function(e){this.$store.commit("common/toc",e)}}},methods:{onToc:function(e){e.push({id:"QPdfviewer-API",label:"QPdfviewer API",level:1,children:Array(0)}),e.push({id:"Donate",label:"Donate",level:1,children:Array(0)}),this.toc=e}}},d=l,c=n("2877"),p=n("5096"),h=n("9c40"),u=n("eebe"),w=n.n(u),f=Object(c["a"])(d,a,o,!1,null,null,null);t["default"]=f.exports;w()(f,"components",{QPageScroller:p["a"],QBtn:h["a"]})}}]);