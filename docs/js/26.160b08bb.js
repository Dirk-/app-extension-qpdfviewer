(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[26],{ff5b:function(n,e,t){"use strict";t.r(e),e["default"]="<template>\n  <div class=\"row justify-beween relative-position\" style=\"min-height: calc(100vh - 98px);\">\n    <div v-for=\"(source, index) in sources\" :key=\"index\" class=\"q-pa-xs pdf-container\" style=\"wifth: 50%;\">\n      <q-pdfviewer\n        v-model=\"show\"\n        :src=\"updatedSrc(source)\"\n        type=\"pdfjs\"\n      />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  data () {\n    return {\n      show: true,\n      sources: [\n        'pdf/pdf-test.pdf',\n        'pdf/c4611_sample_explain.pdf',\n        'pdf/pdf_open_parameters.pdf',\n        'pdf/gre_research_validity_data.pdf'\n      ]\n    }\n  },\n\n  methods: {\n    // do some funky stuff because this site is\n    // using history mode with publicPath, and it makes\n    // pdfjs more comfortable using full urls\n    getLocation (source) {\n      let url = location.href\n      if (location.href[location.href.length - 1] !== '/') {\n        url += '/'\n      }\n      url += '../' + source\n      return url\n    },\n    updatedSrc (src) {\n      if (process.env.MODE === 'electron') {\n        return '/' + src\n      }\n      return this.getLocation(src)\n    }\n  }\n}\n<\/script>\n\n<style>\n.pdf-container {\n  min-height: 400px;\n  border: 1px solix #c0c0c0;\n}\n</style>\n"}}]);